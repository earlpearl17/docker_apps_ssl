[{"model": "auth.user", "fields": {"password": "pbkdf2_sha256$20000$VJyvLrGJoOF1$uoAFXWpewAV6ubqU7AOsdhVu6X8SZQLK9KBwglQKjNg=", "last_login": "2020-08-25T09:14:21.256Z", "is_superuser": true, "username": "teddy", "first_name": "", "last_name": "", "email": "", "is_staff": true, "is_active": true, "date_joined": "2020-03-24T12:08:44.340Z", "groups": [], "user_permissions": []}, "pk": 1}, {"model": "auth.user", "fields": {"password": "pbkdf2_sha256$20000$Ybnd51GueQyq$Ai+zZC8a1xBS9GIz/z4PqTbB5XdAC1mYpmxxzNwXDZ0=", "last_login": "2020-03-24T14:09:28.244Z", "is_superuser": false, "username": "gil", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2020-03-24T12:21:00.313Z", "groups": [], "user_permissions": []}, "pk": 2}, {"model": "auth.user", "fields": {"password": "pbkdf2_sha256$20000$1eosHIwKXkAC$l0ETX6tVdOFZe2mXPbsRF6azIrxOqoxtgGbiLnl5hio=", "last_login": "2022-01-31T12:36:36.407Z", "is_superuser": false, "username": "liam", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2020-03-26T10:36:47.267Z", "groups": [], "user_permissions": []}, "pk": 3}, {"model": "auth.user", "fields": {"password": "pbkdf2_sha256$20000$PW2pmvCGjtFS$+MAyJydPZXA9rcHHlI8lGhN65gi6ew/2sG5yXXuYkNA=", "last_login": "2020-08-25T09:16:32.185Z", "is_superuser": true, "username": "earl", "first_name": "", "last_name": "", "email": "", "is_staff": true, "is_active": true, "date_joined": "2020-04-26T06:07:11.447Z", "groups": [], "user_permissions": []}, "pk": 4}, {"model": "auth.user", "fields": {"password": "pbkdf2_sha256$20000$6rWNK2UIR8Di$/qrwhzj5S1I/U+6GXpk2ZqlHeUdHhMnfrvmGGwuPtfo=", "last_login": "2020-04-27T08:35:24.068Z", "is_superuser": false, "username": "fred", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2020-04-27T08:35:24.003Z", "groups": [], "user_permissions": []}, "pk": 5}, {"model": "sessions.session", "fields": {"session_data": "MjQ4OWJhY2UyNGIwNTJlYjAwZTY2ODIyZDBkY2Q2NTQyNWE3YzExOTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMWI2ZTA5YTM3YWI1NTgwNmVmNTYzMjEwMzI3NzU3ZmJmM2NhNDNkZiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=", "expire_date": "2020-08-28T06:46:12.324Z"}, "pk": "7zt2vjcwhfgs0zjslos2gaj9z40ldb3n"}, {"model": "sessions.session", "fields": {"session_data": "YTI1MWI0MDI5OTk2YzMxOTA2MDNiYjJkZGFkZjJlMTM4YWI4ZjUxZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjY5MTkyZjI0NjZhYTliNzhjNzk3NWZjOWFkNTRhNGVhODI3ZTM0NDQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzIn0=", "expire_date": "2020-04-14T08:45:56.970Z"}, "pk": "d90y54vs9og4nh4r1bv1rdltwu4s3y0x"}, {"model": "learning_logs.topic", "fields": {"text": "Testing", "date_added": "2020-03-24T12:21:11.501Z", "owner": 2}, "pk": 1}, {"model": "learning_logs.topic", "fields": {"text": "Python", "date_added": "2020-03-26T10:38:11.715Z", "owner": 3}, "pk": 2}, {"model": "learning_logs.topic", "fields": {"text": "CCNA", "date_added": "2020-03-26T11:47:58.982Z", "owner": 3}, "pk": 4}, {"model": "learning_logs.topic", "fields": {"text": "Testing", "date_added": "2020-03-28T13:38:11.585Z", "owner": 3}, "pk": 5}, {"model": "learning_logs.topic", "fields": {"text": "Django", "date_added": "2020-03-30T10:18:40.699Z", "owner": 3}, "pk": 6}, {"model": "learning_logs.topic", "fields": {"text": "Networking Fundamentals", "date_added": "2020-04-27T08:35:55.757Z", "owner": 5}, "pk": 7}, {"model": "learning_logs.topic", "fields": {"text": "Flask WTFORMS", "date_added": "2020-08-14T06:46:38.298Z", "owner": 1}, "pk": 8}, {"model": "learning_logs.entry", "fields": {"topic": 1, "text": "Test entry being added to Testing topic", "date_added": "2020-03-24T12:21:42.076Z"}, "pk": 1}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "I will be going through the 2nd edition of Python Crash Course, specifically, the exercises in Part 1 - Python Fundamentals.\r\nHow long will it take me?\r\nAfter I've completed the exercises, I will move on to Part 2 and create the new version of Learning Log. \r\nIt will be a nice Django 2 refresher, before I start my own projects (hours worked, work scheduler, expense tracker / budgeter, TBD)", "date_added": "2020-03-26T10:45:23.161Z"}, "pk": 2}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Just completed the chapter 2 exercises (variables, strings and numbers). Glad I went through it!\r\nI didn't know that string formatting has changed since Python 3.6,\r\n\r\n# 3.5\r\nfull_name = \"{} {}\".format(first_name, last_name)\r\n\r\n# 3.6\r\nfull_name = f\"{first_name} {last_name}\"\r\n\r\nOnto chapter 3!!!", "date_added": "2020-03-26T11:47:20.014Z"}, "pk": 3}, {"model": "learning_logs.entry", "fields": {"topic": 4, "text": "Becoming a Networking Technician, Analyst, Engineer, Specialist, etc. will take some work on my part.\r\nI believe preparing for the new CCNA will give me step up in entering the field. I've found a few resources\r\nthat will help me achieve my goal of re-entering the workforce in the networking field.\r\nWendell Odom has release a book, CCNA 200-301 Official Cert Guide Library, and that will be a good investment.\r\n\r\nhttps://www.ciscopress.com/store/ccna-200-301-official-cert-guide-library-9781587147142\r\n\r\nI've also found a few courses on Udemy by David Bombal \r\n\r\nhttps://www.udemy.com/user/davidbombal/\r\nhttps://www.udemy.com/course/cisco-ccna-icnd2-200-105-complete-course-sims-and-gns3/", "date_added": "2020-03-26T11:57:53.369Z"}, "pk": 4}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Finished the exercises for chapter 3 (Lists). Good refresher for some of the methods available to me.\r\n\r\n# create a list\r\nlist1 = []\r\n\r\n# add to a list\r\nlist1.append('Fred')\r\nlist1.append('Jack')\r\nlist1.append('Pat')\r\n\r\n# insert element into list at position by index\r\nlist1.insert(1,'Herb')\r\n\r\n# delete element from list\r\ndel list1[0]\r\n\r\n# pop last element from list\r\nlast_element = list1.pop()\r\n\r\n# pop specific element from list by index\r\nlist_element = list1.pop(2)\r\n\r\n# remove element from list by value\r\nlist1.remove('Jack')\r\n\r\n# permanent sort\r\nlist1.sort()\r\nlist1.sort(reverse=True)\r\n\r\n# temperary sort\r\nsorted(list1)\r\nsorted(list1,reverse=True)\r\n\r\n# reverse order of list permanently\r\nlist1.reverse()\r\n\r\nOnto chapter 4 (Working with Lists) !!!", "date_added": "2020-03-27T09:21:50.255Z"}, "pk": 5}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Finished the exercises from chapter 4 (Working with Lists). \r\n\r\nUsing for loops to work with lists\r\nCopying lists (using slices, list2 = list1[:] and also by memory location, ie. list2 = list1)\r\nUsing tuples, which are immutable (cannot change)\r\nFollow the style guide when coding.\r\n\r\nOnto chapter 5!!!", "date_added": "2020-03-27T11:20:09.651Z"}, "pk": 6}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Finished the exercises for chapter 5 (if-elif-else conditionals). Feeling good.\r\n\r\nTomorrow, will be onto chapter 6.", "date_added": "2020-03-27T12:21:25.278Z"}, "pk": 7}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Finished the exercises from chapter 6 (Dictionaries). \r\n\r\nRemember methods to loop through dictionaries:\r\na.for key, value in dict.items()\r\nb.for key in dict.keys()\r\nc.for value in dict.values()\r\nd.for key in sorted(dict.keys())\r\ne.for value in set(dict.values()) (python will return ONLY unique values !!!)\r\n\r\nCan also nest dictionaries in lists, lists in dictionaries and dictionaries in dictionaries.\r\n\r\nOnto chapter 7!!!", "date_added": "2020-03-28T11:24:21.859Z"}, "pk": 8}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Started going through Chapter 7 and will return tomorrow to finish it.\r\n\r\nWill jump forward to Part II and start reading about Learning Log (Django 2, not 1.8.4)\r\n\r\nOnwards and upwards!", "date_added": "2020-03-28T11:49:09.154Z"}, "pk": 9}, {"model": "learning_logs.entry", "fields": {"topic": 5, "text": "Testing droplet timezone change", "date_added": "2020-03-28T13:38:34.576Z"}, "pk": 10}, {"model": "learning_logs.entry", "fields": {"topic": 5, "text": "Test 2 entry", "date_added": "2020-03-28T14:05:11.967Z"}, "pk": 11}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Just finished the exercises from chapter 7 (user input and while loops)\r\n\r\na.using input() to get user info\r\nb.working with both text and numerical inputs\r\nc.using while loops to keep programs running\r\nd.control the flow of while loops: break, continue, setting an active flag OR just using True/False\r\ne.copying items from one list to another\r\nf.removing all instances of a value from a list\r\ng.using while loops and adding to dictionaries.\r\n\r\nOnto chapter 8 (Functions)!!!\r\n", "date_added": "2020-03-29T08:11:51.715Z"}, "pk": 12}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Working through the exercises of chapter 8 (Functions)....\r\n\r\na.Positional parameter\r\n         def describe_pet(animal_type, pet_name):\r\n\r\nb.Keyword arguments\r\n         describe_pet(pet_name=\"fred\", animal_type=\"bird)\r\n\r\nc.Setting parameter defaults\r\n         def describe_pet(pet_name, animal_type='dog'):\r\n         describe_pet('willie')\r\n\r\nd.Optional Arguments\r\n        def get_formatted_name(first_name, last_name, middle_name=''):\r\n\r\ne.Returning dictionaries from functions\r\n\r\nf.Using None for Optonal Arguments (None == False)\r\n        def build_person(first_name, last_name, age=None):\r\n\r\nWill finish Chap.8 tomorrow; and, at least, start Chap.9\r\n\r\nOnto Learning Log 2!!!", "date_added": "2020-03-29T09:25:46.862Z"}, "pk": 13}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Continuing with the exercises from chapter 8 (Functions)\r\n\r\na.Passing an Arbitrary Number of Arguments\r\n   def make_pizza(*toppings):\r\n   # asterisk in the parameter name *toppings tells Python to make an empty tuple called toppings\r\n\r\nb.Mixing Positional and Arbitrary Arguments\r\n   def make_pizza(size, *toppings):\r\n   # generic parameter name *args, which collects arbitrary positional arguments\r\n\r\nc.Using Arbitrary Keyword Arguments\r\n   def build_profile(first, last, **user_info):\r\n   # takes in a first and last name, but it accepts an arbitrary number of keyword arguments\r\n   # The double asterisks before the parameter **user_info cause Python to create an empty\r\n   # dictionary called user_info and pack whatever name-value pairs it receives into this dictionary.\r\n\r\n   # parameter name **kwargs is used to collect non-specific keyword arguments.\r\n\r\nd.Storing Your Functions in Modules\r\n   import module_name\r\n   from module_name import function_name\r\n   from module_name import function_name as fn\r\n   import module_name as mn\r\n   from module_name import *\r\n\r\nLooking forward to Chapter 9 (Classes).\r\n\r\nOnto Learning Log 2 !!!", "date_added": "2020-03-30T10:18:25.175Z"}, "pk": 14}, {"model": "learning_logs.entry", "fields": {"topic": 2, "text": "Started chap.9 (Classes) but moved onto Learning Log 2. Shorter session today.\r\n\r\nWill continue with both of them tomorrow!", "date_added": "2020-03-31T11:20:07.475Z"}, "pk": 15}, {"model": "learning_logs.entry", "fields": {"topic": 7, "text": "Cisco is the way to go!", "date_added": "2020-04-27T08:36:27.604Z"}, "pk": 16}, {"model": "learning_logs.entry", "fields": {"topic": 8, "text": "Entry #1", "date_added": "2020-08-14T06:46:58.372Z"}, "pk": 17}, {"model": "admin.logentry", "fields": {"action_time": "2020-03-26T10:39:36.087Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Will be going through the 2nd edition of Python Crash Course", "action_flag": 3, "change_message": ""}, "pk": 1}]